# üöÄ Auto-Start Deployment Webhook
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏° webhook server ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö OrganicNow

param(
    [switch]$StartWebhook = $false
)

Write-Host "üöÄ Starting OrganicNow with Auto-Deployment Support..." -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variables
if (-not $env:DEPLOYMENT_WEBHOOK_TOKEN) {
    $env:DEPLOYMENT_WEBHOOK_TOKEN = "OrganicNow-Deploy-2024-Secret-Default"
    Write-Host "‚ö†Ô∏è  Using default webhook token. Set DEPLOYMENT_WEBHOOK_TOKEN for production." -ForegroundColor Yellow
}

# ‡πÄ‡∏£‡∏¥‡πà‡∏° OrganicNow development environment
Write-Host "üîß Starting OrganicNow development environment..." -ForegroundColor Yellow
try {
    & ".\start_organicnow.ps1"
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ OrganicNow started successfully" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Failed to start OrganicNow. Check the logs above." -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Error starting OrganicNow: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# ‡πÄ‡∏£‡∏¥‡πà‡∏° Deployment Webhook Server (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
if ($StartWebhook) {
    Write-Host ""
    Write-Host "üéØ Starting Deployment Webhook Server..." -ForegroundColor Cyan
    
    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ port 9000 ‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏´‡∏°
    try {
        $portCheck = Get-NetTCPConnection -LocalPort 9000 -ErrorAction SilentlyContinue
        if ($portCheck) {
            Write-Host "‚ö†Ô∏è  Port 9000 is already in use. Stopping existing process..." -ForegroundColor Yellow
            $processes = Get-Process | Where-Object { 
                $_.ProcessName -eq "powershell" -and 
                $_.CommandLine -like "*deploy-webhook.ps1*" 
            } 2>$null
            
            if ($processes) {
                $processes | ForEach-Object { Stop-Process -Id $_.Id -Force }
                Start-Sleep -Seconds 3
            }
        }
    } catch {
        # Port check failed, probably means it's available
    }
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° webhook server ‡πÉ‡∏ô background
    $webhookJob = Start-Job -ScriptBlock {
        param($workingDir, $token)
        Set-Location $workingDir
        $env:DEPLOYMENT_WEBHOOK_TOKEN = $token
        & ".\deploy-webhook.ps1" -Port 9000
    } -ArgumentList $PWD, $env:DEPLOYMENT_WEBHOOK_TOKEN
    
    Start-Sleep -Seconds 2
    
    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ webhook server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    try {
        $healthCheck = Invoke-RestMethod -Uri "http://localhost:9000/health" -Method GET -TimeoutSec 5
        if ($healthCheck.status -eq "healthy") {
            Write-Host "‚úÖ Deployment Webhook Server started successfully" -ForegroundColor Green
            Write-Host "   URL: http://localhost:9000" -ForegroundColor Gray
            Write-Host "   Health: http://localhost:9000/health" -ForegroundColor Gray
            Write-Host "   Deploy: POST http://localhost:9000/deploy" -ForegroundColor Gray
        }
    } catch {
        Write-Host "‚ö†Ô∏è  Webhook server may be starting. Check manually with:" -ForegroundColor Yellow
        Write-Host "   curl http://localhost:9000/health" -ForegroundColor Gray
    }
}

Write-Host ""
Write-Host "üéâ Setup Complete!" -ForegroundColor Green
Write-Host "=================" -ForegroundColor Green
Write-Host ""
Write-Host "üåê Application URLs:" -ForegroundColor Cyan
Write-Host "   Frontend: http://localhost:8080" -ForegroundColor White
Write-Host "   Backend API: http://localhost:8080/api" -ForegroundColor White
if ($StartWebhook) {
    Write-Host "   Webhook Server: http://localhost:9000" -ForegroundColor White
}
Write-Host ""
Write-Host "üîß Next Steps for CI/CD:" -ForegroundColor Cyan
if (-not $StartWebhook) {
    Write-Host "   1. Start webhook server: .\start_with_webhook.ps1 -StartWebhook" -ForegroundColor Gray
} else {
    Write-Host "   1. ‚úÖ Webhook server is running" -ForegroundColor Green
}
Write-Host "   2. Configure GitHub Secrets (see DEPLOYMENT_SETUP.md)" -ForegroundColor Gray
Write-Host "   3. Push to main branch to trigger CI/CD" -ForegroundColor Gray
Write-Host ""
Write-Host "üìñ Documentation:" -ForegroundColor Cyan
Write-Host "   - Setup Guide: DEPLOYMENT_SETUP.md" -ForegroundColor Gray
Write-Host "   - CI/CD Pipeline: .github/workflows/ci.yml" -ForegroundColor Gray
Write-Host ""

if ($StartWebhook) {
    Write-Host "üîÑ Webhook Server Job ID: $($webhookJob.Id)" -ForegroundColor Yellow
    Write-Host "   To stop: Stop-Job $($webhookJob.Id); Remove-Job $($webhookJob.Id)" -ForegroundColor Gray
    Write-Host ""
    
    # ‡πÅ‡∏™‡∏î‡∏á webhook server logs ‡πÉ‡∏ô background
    Write-Host "üìä Webhook Server Logs (Ctrl+C to stop monitoring):" -ForegroundColor Cyan
    Write-Host "===============================================" -ForegroundColor Gray
    
    try {
        while ($true) {
            $jobOutput = Receive-Job -Job $webhookJob -Keep
            if ($jobOutput) {
                Write-Host $jobOutput -ForegroundColor Gray
            }
            Start-Sleep -Seconds 1
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ job ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
            if ($webhookJob.State -ne "Running") {
                Write-Host "‚ùå Webhook server stopped unexpectedly" -ForegroundColor Red
                break
            }
        }
    } catch {
        Write-Host "üõë Monitoring stopped" -ForegroundColor Yellow
    }
}

Write-Host "üéØ Ready for automated deployments! üöÄ" -ForegroundColor Green