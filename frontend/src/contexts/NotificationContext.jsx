import React, { createContext, useContext, useState, useEffect } from 'react';
import { useToast } from './ToastContext';

const NotificationContext = createContext();

export const useNotifications = () => {
    const context = useContext(NotificationContext);
    if (!context) {
        throw new Error('useNotifications must be used within a NotificationProvider');
    }
    return context;
};

const API_BASE = import.meta.env?.VITE_API_URL ?? "http://localhost:8080";

export const NotificationProvider = ({ children }) => {
    const [unreadCount, setUnreadCount] = useState(0);
    const [notifications, setNotifications] = useState([]);
    const [loading, setLoading] = useState(false);
    const [previousCount, setPreviousCount] = useState(0);
    const [lastToastTime, setLastToastTime] = useState(0); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á toast ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    
    const { showGeneralNotification } = useToast();

    // ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô unread notifications
    const loadUnreadCount = async () => {
        try {
            console.log('üîî Loading unread count from:', `${API_BASE}/notifications/count/unread`);
            const response = await fetch(`${API_BASE}/notifications/count/unread`, {
                credentials: 'include'
            });
            console.log('üîî Unread count response:', response.status, response.ok);
            if (response.ok) {
                const data = await response.json();
                console.log('üîî Unread count data:', data);
                const newCount = data.result || 0;
                
                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ notification ‡πÉ‡∏´‡∏°‡πà (count ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô) ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á toast ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                if (newCount > previousCount && previousCount >= 0) {
                    console.log('üéØ New notification detected! Checking if should show toast...');
                    console.log(`Previous count: ${previousCount}, New count: ${newCount}`);
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á toast ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                    const now = Date.now();
                    const oneMinuteAgo = now - 60000;
                    
                    if (lastToastTime === 0 || lastToastTime < oneMinuteAgo) {
                        console.log('üéØ OK to show toast - enough time passed');
                        setLastToastTime(now);
                        setTimeout(() => {
                            loadLatestNotificationForToast();
                        }, 500);
                    } else {
                        console.log('üéØ Skip toast - too soon since last toast');
                    }
                }
                
                setPreviousCount(newCount);
                setUnreadCount(newCount);
            } else {
                console.error('üîî Failed to load unread count:', response.status);
            }
        } catch (error) {
            console.error('üîî Error loading unread count:', error);
        }
    };

    // ‡πÇ‡∏´‡∏•‡∏î notification ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á toast ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á‡πÜ)
    const loadLatestNotificationForToast = async () => {
        try {
            console.log('üéØ Loading latest notifications for toast (only new ones)...');
            const response = await fetch(`${API_BASE}/notifications`, {
                credentials: 'include'
            });
            if (response.ok) {
                const data = await response.json();
                const latestNotifications = data.result || [];
                console.log('üéØ Latest notifications loaded:', latestNotifications.length);
                
                // ‡πÅ‡∏™‡∏î‡∏á toast ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ notification ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡∏Å (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                const thirtySecondsAgo = new Date(Date.now() - 30000);
                const brandNewNotifications = latestNotifications.filter(n => 
                    !n.isRead && 
                    new Date(n.createdAt) > thirtySecondsAgo &&
                    n.type === 'MAINTENANCE_DUE'
                );
                
                console.log('üéØ Brand new notifications (30 sec):', brandNewNotifications.length);
                
                // ‡πÅ‡∏™‡∏î‡∏á toast ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ notification ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á‡πÜ (1 ‡∏≠‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
                if (brandNewNotifications.length > 0) {
                    const newestNotification = brandNewNotifications[0];
                    console.log('üéØ Showing toast for BRAND NEW notification:', newestNotification.title);
                    showGeneralNotification(newestNotification);
                } else {
                    console.log('üéØ No brand new notifications - no toast shown');
                }
            } else {
                console.error('üéØ Failed to load notifications for toast:', response.status);
            }
        } catch (error) {
            console.error('üìÑ Error loading latest notification for toast:', error);
        }
    };

    // ‡πÇ‡∏´‡∏•‡∏î notifications ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const loadNotifications = async () => {
        try {
            setLoading(true);
            console.log('üìÑ Loading notifications from:', `${API_BASE}/notifications`);
            const response = await fetch(`${API_BASE}/notifications`, {
                credentials: 'include'
            });
            console.log('üìÑ Notifications response:', response.status, response.ok);
            if (response.ok) {
                const data = await response.json();
                console.log('üìÑ Notifications data:', data);
                setNotifications(data.result || []);
            } else {
                console.error('üìÑ Failed to load notifications:', response.status);
            }
        } catch (error) {
            console.error('üìÑ Error loading notifications:', error);
        } finally {
            setLoading(false);
        }
    };

    // Refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notifications
    const refreshNotifications = async () => {
        console.log('üîÑ Refreshing notifications (both count and list)...');
        try {
            await Promise.all([loadUnreadCount(), loadNotifications()]);
            console.log('‚úÖ Notification refresh completed');
        } catch (error) {
            console.error('‚ùå Error refreshing notifications:', error);
        }
    };

    // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    const markAsRead = async (notificationId) => {
        try {
            const response = await fetch(`${API_BASE}/notifications/${notificationId}/read`, {
                method: 'PUT',
                credentials: 'include'
            });

            if (response.ok) {
                setNotifications(prev => prev.map(notif => 
                    notif.id === notificationId 
                        ? { ...notif, isRead: true, readAt: new Date().toISOString() }
                        : notif
                ));
                setUnreadCount(prev => Math.max(0, prev - 1));
                return true;
            }
        } catch (error) {
            console.error('Error marking notification as read:', error);
        }
        return false;
    };

    // ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    const markAllAsRead = async () => {
        try {
            const response = await fetch(`${API_BASE}/notifications/read-all`, {
                method: 'PUT',
                credentials: 'include'
            });

            if (response.ok) {
                setNotifications(prev => prev.map(notif => ({
                    ...notif,
                    isRead: true,
                    readAt: new Date().toISOString()
                })));
                setUnreadCount(0);
                return true;
            }
        } catch (error) {
            console.error('Error marking all notifications as read:', error);
        }
        return false;
    };

    // ‡∏•‡∏ö notification
    const deleteNotification = async (notificationId) => {
        try {
            const response = await fetch(`${API_BASE}/notifications/${notificationId}`, {
                method: 'DELETE',
                credentials: 'include'
            });

            if (response.ok) {
                const notificationToDelete = notifications.find(n => n.id === notificationId);
                setNotifications(prev => prev.filter(notif => notif.id !== notificationId));
                
                if (notificationToDelete && !notificationToDelete.isRead) {
                    setUnreadCount(prev => Math.max(0, prev - 1));
                }
                return true;
            }
        } catch (error) {
            console.error('Error deleting notification:', error);
        }
        return false;
    };

    useEffect(() => {
        loadUnreadCount();
        loadNotifications();
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ previousCount ‡πÄ‡∏õ‡πá‡∏ô current count ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        setTimeout(() => {
            setPreviousCount(unreadCount);
        }, 1000);
        
        // Auto-refresh ‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ä‡πâ‡∏≤‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡πà‡∏≠‡∏¢)
        const interval = setInterval(() => {
            console.log('üîÑ Auto-refreshing notifications...');
            loadUnreadCount();
            loadNotifications();
        }, 120000); // 2 ‡∏ô‡∏≤‡∏ó‡∏µ
        
        // Page Visibility API - refresh ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
        const handleVisibilityChange = () => {
            if (!document.hidden) {
                console.log('üëÄ Tab became visible - refreshing notifications');
                loadUnreadCount();
                loadNotifications();
            }
        };
        
        document.addEventListener('visibilitychange', handleVisibilityChange);
        
        return () => {
            console.log('üßπ Cleaning up notification auto-refresh interval');
            clearInterval(interval);
            document.removeEventListener('visibilitychange', handleVisibilityChange);
        };
    }, []);

    const value = {
        unreadCount,
        notifications,
        loading,
        refreshNotifications,
        markAsRead,
        markAllAsRead,
        deleteNotification,
        loadUnreadCount,
        loadNotifications
    };

    return (
        <NotificationContext.Provider value={value}>
            {children}
        </NotificationContext.Provider>
    );
};