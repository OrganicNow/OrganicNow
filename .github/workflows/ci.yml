name: CI - Frontend & Backend Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: read

# üëá ‡πÉ‡∏ä‡πâ DB ‡∏ï‡πà‡∏≠‡∏£‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á push/PR
env:
  DB_NAME: organicnow_test_${{ github.run_id }}
  DB_USER: postgres
  DB_PASS: postgres123

jobs:
  backend:
    name: Backend (Maven tests with Postgres service)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}     # üëà ‡πÉ‡∏ä‡πâ DB ‡∏ï‡πà‡∏≠‡∏£‡∏±‡∏ô
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASS }}
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build & Test (JaCoCo)
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.DB_NAME }}   # üëà ‡∏ä‡∏µ‡πâ DB ‡∏ï‡πà‡∏≠‡∏£‡∏±‡∏ô
          SPRING_DATASOURCE_USERNAME: ${{ env.DB_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.DB_PASS }}
        run: |
          chmod +x mvnw || true
          ./mvnw -q -U clean verify

      - name: Upload Maven surefire reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: backend/target/surefire-reports

      - name: Upload JaCoCo HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-site
          path: backend/target/site/jacoco

      - name: Upload JaCoCo XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-xml
          path: backend/target/site/jacoco/jacoco.xml

      # ----------------------------
      # ‚úÖ Generate & Upload OpenAPI
      # ----------------------------
      - name: Start app (for OpenAPI generation)
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.DB_NAME }}   # üëà ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î
          SPRING_DATASOURCE_USERNAME: ${{ env.DB_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.DB_PASS }}
          MANAGEMENT_ENDPOINTS_WEB_BASE_PATH: /actuator
          MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
        run: |
          set -euo pipefail
          nohup ./mvnw -q -DskipTests spring-boot:run >/dev/null 2>&1 &
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
              echo "Spring Boot is UP at /actuator/health ‚úÖ"
              break
            fi
            echo "Waiting for Spring Boot... ($i/60)"
            sleep 2
            if [ "$i" -eq 60 ]; then
              echo "Spring Boot not healthy in time ‚ùå"
              kill $(lsof -t -i:8080) 2>/dev/null || true
              exit 1
            fi
          done

      - name: Generate OpenAPI (openapi.json)
        run: |
          curl -fsS "http://localhost:8080/v3/api-docs" -o target/openapi.json || \
          curl -fsS "http://localhost:8080/v3/api-docs" -o target/openapi.json
          test -s target/openapi.json || (echo "openapi.json is empty" && exit 1)

      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-json
          path: backend/target/openapi.json

      - name: Stop app
        if: always()
        run: |
          kill $(lsof -t -i:8080) 2>/dev/null || true

  e2e:
    name: E2E via docker-compose + Cypress (root)
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: docker-compose.yml
      BASE_URL: http://localhost:5173
      HEALTH_URL_BACKEND: http://localhost:8080/actuator/health
      HEALTH_URL_FRONTEND: http://localhost:5173
      POSTGRES_SERVICE_NAME: organicnow-db
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20 (for Cypress CLI at repo root)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json

      - name: Install Cypress deps (repo root)
        run: |
          npm ci
          npx cypress install

      - name: Install frontend deps
        run: npm ci --prefix frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # üëá ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå .env ‡πÉ‡∏´‡πâ docker-compose ‡∏™‡∏£‡πâ‡∏≤‡∏á DB ‡∏ï‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏™‡∏à‡∏∞‡πÉ‡∏ä‡πâ
      - name: Prepare compose .env
        run: |
          printf "POSTGRES_DB=%s\nPOSTGRES_USER=%s\nPOSTGRES_PASSWORD=%s\n" "${DB_NAME}" "${DB_USER}" "${DB_PASS}" > .env
          cat .env

      - name: docker compose up (build & run)
        run: |
          docker compose -f "${COMPOSE_FILE}" up -d --build
          docker ps

      - name: Wait for backend to be healthy
        run: |
          set -euo pipefail
          for i in {1..60}; do
            if curl -fsS "$HEALTH_URL_BACKEND" | grep -q '"status":"UP"'; then
              echo "Backend healthy ‚úÖ"
              exit 0
            fi
            echo "Waiting for backend... ($i/60)"
            sleep 2
          done
          echo "Backend not healthy in time ‚ùå"; docker ps; exit 1

      - name: Wait for frontend to be up
        run: |
          for i in {1..60}; do
            curl -fsS "$HEALTH_URL_FRONTEND" && exit 0
            echo "Waiting for frontend... ($i/60)"
            sleep 2
          done
          echo "Frontend not up in time"; docker ps; exit 1

      # ----------------------------
      # ‚úÖ Run Integration Tests ‡∏ö‡∏ô network ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö compose
      # ----------------------------
      - name: Run Integration Tests (using Maven builder image on same network)
        run: |
          set -euo pipefail
          echo "üîé Finding backend service & its network..."
          BACKEND_SVC_NAME="backend"
          BACKEND_CID="$(docker compose -f "${COMPOSE_FILE}" ps -q "${BACKEND_SVC_NAME}" || true)"
          if [ -z "$BACKEND_CID" ]; then
            echo "‚ùå Cannot find backend container by service name '${BACKEND_SVC_NAME}'."
            docker compose -f "${COMPOSE_FILE}" ps
            exit 1
          fi
          NET_NAME="$(docker inspect -f '{{range $k,$v := .NetworkSettings.Networks}}{{println $k}}{{end}}' "$BACKEND_CID" | head -n1)"
          if [ -z "$NET_NAME" ]; then
            echo "‚ùå Cannot detect docker network of backend container."
            docker inspect "$BACKEND_CID"
            exit 1
          fi
          echo "‚úÖ Using network: $NET_NAME"

          echo "üèóÔ∏è  Running Integration Tests with Maven on same network..."
          docker run --rm \
            --network "$NET_NAME" \
            -v "${{ github.workspace }}/backend:/app" \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -w /app \
            maven:3.9.6-eclipse-temurin-21 \
            mvn -q -U test \
              -Dspring.profiles.active=test \
              -Dspring.datasource.url="jdbc:postgresql://${POSTGRES_SERVICE_NAME}:5432/${DB_NAME}" \
              -Dspring.datasource.username="${DB_USER}" \
              -Dspring.datasource.password="${DB_PASS}" \
              -Dtest='*IntegrationTest'
              -Dtest='!AssetGroupControllerIntegrationTest'

      - name: Upload Integration Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: backend/target/surefire-reports

      - name: Run Cypress E2E (using root cypress.config.js)
        env:
          CYPRESS_baseUrl: ${{ env.BASE_URL }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        run: |
          npx cypress run --headless --config baseUrl=${{ env.BASE_URL }} ${CYPRESS_RECORD_KEY:+--record --key $CYPRESS_RECORD_KEY}

      - name: Upload Cypress artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-cypress-results
          path: |
            cypress/videos
            cypress/screenshots

      - name: Teardown containers
        if: always()
        run: docker compose -f "${{ env.COMPOSE_FILE }}" down -v

  docker-push-frontend:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build & Push Frontend Image
    runs-on: ubuntu-latest
    needs: [backend, e2e]
    env:
      IMAGE_NAME: heangkung/organicnow-frontend
      TAG_SHA: ${{ github.sha }}
      TAG_LATEST: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (SHA tag)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG_SHA }}

      - name: Also tag :latest when on main
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG_LATEST }}

  docker-push-backend:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build & Push Backend Image
    runs-on: ubuntu-latest
    needs: [backend, e2e]
    env:
      IMAGE_NAME: heangkung/organicnow-backend
      TAG_SHA: ${{ github.sha }}
      TAG_LATEST: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (SHA tag)
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG_SHA }}

      - name: Also tag :latest when on main
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG_LATEST }}

#  post-merge-tests:
#    name: Post-Merge Tests (run only after PR is merged)
#    runs-on: ubuntu-latest
#    if: >
#      github.event_name == 'pull_request' &&
#      github.event.action == 'closed' &&
#      github.event.pull_request.merged == true
#    env:
#      DB_NAME: organicnow_test_${{ github.run_id }}
#      DB_USER: postgres
#      DB_PASS: postgres123
#    steps:
#      - name: Checkout merged base (main)
#        uses: actions/checkout@v4
#        with:
#          ref: ${{ github.event.pull_request.base.ref }}  # main ‡∏´‡∏•‡∏±‡∏á merge
#
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#          cache: 'maven'
#
#      - name: Start Postgres service
#        uses: hoverkraft-tech/compose-action@v2.0.2
#        with:
#          compose-file: |
#            version: '3.8'
#            services:
#              pg:
#                image: postgres:16
#                ports: ["5433:5432"]
#                environment:
#                  POSTGRES_DB: ${DB_NAME}
#                  POSTGRES_USER: ${DB_USER}
#                  POSTGRES_PASSWORD: ${DB_PASS}
#                healthcheck:
#                  test: ["CMD-SHELL", "pg_isready -U postgres"]
#                  interval: 5s
#                  timeout: 5s
#                  retries: 20
#
#      - name: Wait for DB (5433)
#        run: |
#          for i in {1..60}; do
#            if pg_isready -h localhost -p 5433 -U postgres >/dev/null 2>&1; then
#              echo "DB is ready ‚úÖ"; exit 0
#            fi
#            echo "Waiting DB... ($i/60)"; sleep 2
#          done
#          echo "DB not ready ‚ùå"; exit 1
#
#      - name: Backend tests on merged main
#        working-directory: backend
#        env:
#          SPRING_PROFILES_ACTIVE: test
#          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/${{ env.DB_NAME }}
#          SPRING_DATASOURCE_USERNAME: ${{ env.DB_USER }}
#          SPRING_DATASOURCE_PASSWORD: ${{ env.DB_PASS }}
#        run: |
#          chmod +x mvnw || true
#          ./mvnw -q -U clean verify
#
#      - name: Upload post-merge test reports
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: post-merge-backend-test-reports
#          path: backend/target/surefire-reports

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend, e2e, docker-push-frontend, docker-push-backend]
    steps:
      - run: echo "Backend tests + E2E (compose) + Push frontend & backend images finished."
