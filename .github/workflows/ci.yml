name: CI - Frontend & Backend Tests

on:
  push:
    branches: [main, demo/cicd-setup]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  backend:
    name: Backend (Maven tests with Postgres service)
    runs-on: ubuntu-latest
    continue-on-error: true  # ‚úÖ ‡πÉ‡∏´‡πâ CI/CD ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ tests ‡∏à‡∏∞ fail
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: organicnow_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build & Test (JaCoCo)
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/organicnow_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres123
          SPRING_SQL_INIT_MODE: never
        run: |
          chmod +x mvnw || true
          ./mvnw -q -U clean verify
      - name: Upload Maven surefire reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: backend/target/surefire-reports

      - name: Upload JaCoCo HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-site
          path: backend/target/site/jacoco

      - name: Upload JaCoCo XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-xml
          path: backend/target/site/jacoco/jacoco.xml

      # ----------------------------
      # ‚úÖ Generate & Upload OpenAPI
      # ----------------------------
      - name: Start app (for OpenAPI generation)
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/organicnow_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres123
          SPRING_SQL_INIT_MODE: never
          # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö base-path ‡πÅ‡∏•‡∏∞ exposure ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå test
          MANAGEMENT_ENDPOINTS_WEB_BASE_PATH: /actuator
          MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
        run: |
          set -euo pipefail
          nohup ./mvnw -q -DskipTests spring-boot:run >/dev/null 2>&1 &
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
              echo "Spring Boot is UP at /actuator/health ‚úÖ"
              break
            fi
            echo "Waiting for Spring Boot... ($i/60)"
            sleep 2
            if [ "$i" -eq 60 ]; then
              echo "Spring Boot not healthy in time ‚ùå"
              kill $(lsof -t -i:8080) 2>/dev/null || true
              exit 1
            fi
          done
      - name: Generate OpenAPI (openapi.json)
        run: |
          curl -fsS "http://localhost:8080/v3/api-docs" -o target/openapi.json || \
          curl -fsS "http://localhost:8080/v3/api-docs" -o target/openapi.json
          test -s target/openapi.json || (echo "openapi.json is empty" && exit 1)
      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-json
          path: backend/target/openapi.json

      - name: Stop app
        if: always()
        run: |
          kill $(lsof -t -i:8080) 2>/dev/null || true
  e2e:
    name: E2E via docker-compose + Cypress (root)
    runs-on: ubuntu-latest
    continue-on-error: true  # ‚úÖ ‡πÉ‡∏´‡πâ CI/CD ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ E2E tests ‡∏à‡∏∞ fail
    env:
      COMPOSE_FILE: docker-compose.yml
      BASE_URL: http://localhost:5173
      HEALTH_URL_BACKEND: http://localhost:8080/actuator/health
      HEALTH_URL_FRONTEND: http://localhost:5173
      POSTGRES_SERVICE_NAME: organicnow-db
      POSTGRES_DB_NAME: apartment_management
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20 (for Cypress CLI at repo root)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
      - name: Install Cypress deps (repo root)
        run: |
          npm ci
          npx cypress install
      - name: Install frontend deps  # ‚úÖ ADDED
        run: npm ci --prefix frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: docker compose up (build & run)
        run: |
          docker compose -f "${COMPOSE_FILE}" up -d --build
          docker ps
      - name: Wait for backend to be healthy
        run: |
          set -euo pipefail
          for i in {1..60}; do
            if curl -fsS "$HEALTH_URL_BACKEND" | grep -q '"status":"UP"'; then
              echo "Backend healthy ‚úÖ"
              exit 0
            fi
            echo "Waiting for backend... ($i/60)"
            sleep 2
          done
          echo "Backend not healthy in time ‚ùå"; docker ps; exit 1
      - name: Wait for frontend to be up
        run: |
          set -euo pipefail
          for i in {1..60}; do
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ frontend container ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞ nginx serving files
            if curl -fsS "$HEALTH_URL_FRONTEND" >/dev/null 2>&1; then
              echo "Frontend is up ‚úÖ"
              exit 0
            fi
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ container ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
            if ! docker ps --format "table {{.Names}}" | grep -q "organicnow-frontend"; then
              echo "Frontend container not running! Checking logs..."
              docker logs organicnow-frontend || echo "No logs available"
              docker ps
              exit 1
            fi
            echo "Waiting for frontend... ($i/60)"
            sleep 3
          done
          echo "Frontend not up in time"; docker ps; docker logs organicnow-frontend; exit 1
      # ----------------------------
      # ‚úÖ Run Integration Tests ‡∏ö‡∏ô network ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö compose
      # ‡πÉ‡∏ä‡πâ image Maven (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô stage builder) ‡πÇ‡∏î‡∏¢ mount ‡πÇ‡∏Ñ‡πâ‡∏î backend ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
      # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ network ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å service 'backend' ‡πÉ‡∏ô compose ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      # ----------------------------
      - name: Run Integration Tests (using Maven builder image on same network)
        run: |
          set -euo pipefail
          echo "üîé Finding backend service & its network..."
          BACKEND_SVC_NAME="organicnow-backend"
          BACKEND_CID="$(docker ps --filter name=${BACKEND_SVC_NAME} --format '{{.ID}}' | head -n1)"
          if [ -z "$BACKEND_CID" ]; then
            echo "‚ùå Cannot find backend container by name '${BACKEND_SVC_NAME}'."
            docker ps
            exit 1
          fi
          NET_NAME="$(docker inspect -f '{{range $k,$v := .NetworkSettings.Networks}}{{println $k}}{{end}}' "$BACKEND_CID" | head -n1)"
          if [ -z "$NET_NAME" ]; then
            echo "‚ùå Cannot detect docker network of backend container."
            docker inspect "$BACKEND_CID"
            exit 1
          fi
          echo "‚úÖ Using network: $NET_NAME"
          echo "üèóÔ∏è  Running Integration Tests with Maven on same network..."
          docker run --rm \
            --network "$NET_NAME" \
            -v "${{ github.workspace }}/backend:/app" \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -w /app \
            maven:3.9.6-eclipse-temurin-21 \
            mvn -q -U test \
              -Dspring.profiles.active=test \
              -Dspring.datasource.url="jdbc:postgresql://${POSTGRES_SERVICE_NAME}:5432/${POSTGRES_DB_NAME}" \
              -Dspring.datasource.username=postgres \
              -Dspring.datasource.password=postgres123 \
              -Dspring.sql.init.mode=never \
              -Dtest='*IntegrationTest'
      - name: Upload Integration Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: backend/target/surefire-reports

      - name: Run Cypress E2E (using root cypress.config.js)
        env:
          CYPRESS_baseUrl: ${{ env.BASE_URL }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_defaultCommandTimeout: 10000
          CYPRESS_requestTimeout: 10000
          CYPRESS_responseTimeout: 10000
        run: |
          npx cypress run --headless --config baseUrl=${{ env.BASE_URL }},defaultCommandTimeout=10000,requestTimeout=10000,responseTimeout=10000 ${CYPRESS_RECORD_KEY:+--record --key $CYPRESS_RECORD_KEY}
      - name: Upload Cypress artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-cypress-results
          path: |
            cypress/videos
            cypress/screenshots
      - name: Teardown containers
        if: always()
        run: docker compose -f "${{ env.COMPOSE_FILE }}" down -v

  docker-push-frontend:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/demo/cicd-setup')
    name: Build & Push Frontend Image
    runs-on: ubuntu-latest
    needs: [backend]  # ‚úÖ ‡∏•‡∏ö e2e ‡∏≠‡∏≠‡∏Å ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß - ‡πÉ‡∏´‡πâ build ‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ backend fail
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: kkkkhxx/organicnow-frontend
      TAG_SHA: ${{ github.sha }}
      TAG_LATEST: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (SHA tag)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_SHA }}

      - name: Also tag :latest when on main or demo
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/demo/cicd-setup'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_LATEST }}

  docker-push-backend:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/demo/cicd-setup')
    name: Build & Push Backend Image
    runs-on: ubuntu-latest
    needs: [backend]  # ‚úÖ ‡∏•‡∏ö e2e ‡∏≠‡∏≠‡∏Å ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß - ‡πÉ‡∏´‡πâ build ‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ backend fail
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: kkkkhxx/organicnow-backend
      TAG_SHA: ${{ github.sha }}
      TAG_LATEST: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (SHA tag)
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_SHA }}

      - name: Also tag :latest when on main or demo
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/demo/cicd-setup'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_LATEST }}

  summary:
    name: CI/CD Summary (Build Complete - Ready for Manual Deploy)
    runs-on: ubuntu-latest
    needs: [backend, e2e, docker-push-frontend, docker-push-backend]
    if: always()  # ‚úÖ ‡∏£‡∏±‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏°‡πâ jobs ‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏∞ fail
    steps:
      - name: Build Summary
        run: |
          echo "üéâ CI/CD Build Pipeline Summary:"
          echo "================================="
          echo "üìä Backend Tests: ${{ needs.backend.result }}"
          echo "üìä E2E Tests: ${{ needs.e2e.result }}"
          echo "‚úÖ Frontend Image Build: ${{ needs.docker-push-frontend.result }}"
          echo "‚úÖ Backend Image Build: ${{ needs.docker-push-backend.result }}"
          echo ""
          echo "üì¶ Latest Images Built:"
          echo "   - ghcr.io/kkkkhxx/organicnow-frontend:latest"
          echo "   - ghcr.io/kkkkhxx/organicnow-backend:latest"
          echo ""
          if [ "${{ needs.docker-push-frontend.result }}" == "success" ] && [ "${{ needs.docker-push-backend.result }}" == "success" ]; then
            echo "üöÄ Ready for Manual Deployment!"
            echo "   Run: ./deploy.ps1"
            echo "   Then access: http://localhost:8080"
          else
            echo "‚ö†Ô∏è  Some image builds failed. Check logs above."
            echo "   Frontend Build: ${{ needs.docker-push-frontend.result }}"
            echo "   Backend Build: ${{ needs.docker-push-backend.result }}"
          fi
