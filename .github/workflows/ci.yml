name: CI - Backend (Maven) + E2E (Integration+Cypress)

on:
  pull_request:
    branches: [main]
    # รันเฉพาะ lifecycle ของ PR ก่อน merge (ไม่รวม closed)
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read

# ใช้ DB ต่อรัน เพื่อกันชนกันระหว่างงานหลายรอบ
env:
  DB_NAME: organicnow_test_${{ github.run_id }}
  DB_USER: postgres
  DB_PASS: postgres123

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  backend:
    name: Backend (Maven tests with Postgres service)
    # ไม่รันถ้า PR ยังเป็น draft (ถือว่ายังไม่ "จะ merge")
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASS }}
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build & Test (JaCoCo)
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.DB_NAME }}
          SPRING_DATASOURCE_USERNAME: ${{ env.DB_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.DB_PASS }}
        run: |
          chmod +x mvnw || true
          ./mvnw -q -U clean verify

      - name: Upload Maven surefire reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: backend/target/surefire-reports

      - name: Upload JaCoCo HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-site
          path: backend/target/site/jacoco

      - name: Upload JaCoCo XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-xml
          path: backend/target/site/jacoco/jacoco.xml

      # สตาร์ทแอพชั่วคราวเพื่อดึง openapi.json (ถ้าต้องใช้)
      - name: Start app (for OpenAPI generation)
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.DB_NAME }}
          SPRING_DATASOURCE_USERNAME: ${{ env.DB_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.DB_PASS }}
          MANAGEMENT_ENDPOINTS_WEB_BASE_PATH: /actuator
          MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
        run: |
          set -euo pipefail
          nohup ./mvnw -q -DskipTests spring-boot:run >/dev/null 2>&1 &
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
              echo "Spring Boot is UP at /actuator/health ✅"
              break
            fi
            echo "Waiting for Spring Boot... ($i/60)"
            sleep 2
          done

      - name: Generate OpenAPI (openapi.json)
        run: |
          curl -fsS "http://localhost:8080/v3/api-docs" -o target/openapi.json
          test -s target/openapi.json || (echo "openapi.json is empty" && exit 1)

      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-json
          path: backend/target/openapi.json

      - name: Stop app
        if: always()
        run: |
          kill $(lsof -t -i:8080) 2>/dev/null || true

  e2e:
    name: E2E via docker-compose (Integration + Cypress)
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: docker-compose.yml
      BASE_URL: http://localhost:5173
      HEALTH_URL_BACKEND: http://localhost:8080/actuator/health
      HEALTH_URL_FRONTEND: http://localhost:5173
      POSTGRES_SERVICE_NAME: organicnow-db
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20 (for Cypress CLI at repo root)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json

      - name: Install Cypress deps (repo root)
        run: |
          npm ci
          npx cypress install

      - name: Install frontend deps
        run: npm ci --prefix frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare compose .env (unique DB per run)
        run: |
          printf "POSTGRES_DB=%s\nPOSTGRES_USER=%s\nPOSTGRES_PASSWORD=%s\n" "${DB_NAME}" "${DB_USER}" "${DB_PASS}" > .env
          cat .env

      - name: docker compose up (build & run)
        run: |
          docker compose -f "${COMPOSE_FILE}" up -d --build
          docker ps

      - name: Wait for backend to be healthy
        run: |
          set -euo pipefail
          for i in {1..60}; do
            if curl -fsS "$HEALTH_URL_BACKEND" | grep -q '"status":"UP"'; then
              echo "Backend healthy ✅"; exit 0
            fi
            echo "Waiting for backend... ($i/60)"; sleep 2
          done
          echo "Backend not healthy in time ❌"; docker ps; exit 1

      - name: Wait for frontend to be up
        run: |
          for i in {1..60}; do
            curl -fsS "$HEALTH_URL_FRONTEND" && exit 0
            echo "Waiting for frontend... ($i/60)"; sleep 2
          done
          echo "Frontend not up in time"; docker ps; exit 1

      # Integration tests (Maven) บน network เดียวกับ compose
      - name: Run Integration Tests (using Maven on compose network)
        run: |
          set -euo pipefail
          BACKEND_SVC_NAME="backend"
          BACKEND_CID="$(docker compose -f "${COMPOSE_FILE}" ps -q "${BACKEND_SVC_NAME}" || true)"
          if [ -z "$BACKEND_CID" ]; then
            echo "❌ Cannot find backend container by service name '${BACKEND_SVC_NAME}'."
            docker compose -f "${COMPOSE_FILE}" ps
            exit 1
          fi
          NET_NAME="$(docker inspect -f '{{range $k,$v := .NetworkSettings.Networks}}{{println $k}}{{end}}' "$BACKEND_CID" | head -n1)"
          if [ -z "$NET_NAME" ]; then
            echo "❌ Cannot detect docker network of backend container."
            docker inspect "$BACKEND_CID"
            exit 1
          fi
          echo "✅ Using network: $NET_NAME"

          docker run --rm \
            --network "$NET_NAME" \
            -v "${{ github.workspace }}/backend:/app" \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e DOCKER_HOST=unix:///var/run/docker.sock \
            -e TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE=/var/run/docker.sock \
            -w /app \
            maven:3.9.6-eclipse-temurin-21 \
            mvn -q -U test \
              -Dspring.profiles.active=test \
              -Dspring.datasource.url="jdbc:postgresql://${POSTGRES_SERVICE_NAME}:5432/${DB_NAME}" \
              -Dspring.datasource.username="${DB_USER}" \
              -Dspring.datasource.password="${DB_PASS}" \
              -Dtest='*IntegrationTest'

      - name: Upload Integration Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: backend/target/surefire-reports

      - name: Run Cypress E2E (using root cypress.config.js)
        env:
          CYPRESS_baseUrl: ${{ env.BASE_URL }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        run: |
          npx cypress run --headless --config baseUrl=${{ env.BASE_URL }} ${CYPRESS_RECORD_KEY:+--record --key $CYPRESS_RECORD_KEY}

      - name: Upload Cypress artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-cypress-results
          path: |
            cypress/videos
            cypress/screenshots

  summary:
    name: CI Summary
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [backend, e2e]
    steps:
      - run: echo "Backend (Maven) + E2E (Integration + Cypress) finished."
