package com.organicnow.backend.schedule;

import com.organicnow.backend.service.NotificationService;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor;
import org.springframework.test.context.ActiveProfiles;

import static org.mockito.Mockito.*;

/**
 * Integration Test ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NotificationScheduler
 * - ‡πÇ‡∏´‡∏•‡∏î Spring context ‡∏à‡∏£‡∏¥‡∏á
 * - ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£ register ‡∏á‡∏≤‡∏ô @Scheduled ‡πÇ‡∏î‡∏¢ mock ‡∏ó‡∏±‡πâ‡∏á BeanPostProcessor ‡πÅ‡∏•‡∏∞ TaskScheduler
 *   ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô background scheduling 100%
 */
@SpringBootTest(properties = {
        "spring.task.scheduling.enabled=false"  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ (‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô‡∏ï‡∏≠‡∏î‡πâ‡∏ß‡∏¢)
})
@ActiveProfiles("test")
class NotificationSchedulerIntegrationTest {

    @Autowired
    private NotificationScheduler notificationScheduler;

    @MockBean
    private NotificationService notificationService;

    // üõë ‡∏Å‡∏±‡∏ô ScheduledAnnotationBeanPostProcessor ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏á‡∏≤‡∏ô @Scheduled
    @MockBean
    private ScheduledAnnotationBeanPostProcessor scheduledAnnotationBeanPostProcessor;

    // üõë ‡∏Å‡∏±‡∏ô TaskScheduler (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ schedule ‡∏á‡∏≤‡∏ô‡πÉ‡∏î ‡πÜ
    @MockBean(name = "taskScheduler")
    private TaskScheduler taskScheduler;

    @Test
    @DisplayName("checkMaintenanceDueNotifications() ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å service ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
    void testCheckMaintenanceDueNotifications() {
        notificationScheduler.checkMaintenanceDueNotifications();
        verify(notificationService, times(1)).checkAndCreateDueNotifications();
        verifyNoMoreInteractions(notificationService);
    }

    @Test
    @DisplayName("checkMaintenanceDueNotificationsFrequent() ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å service ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
    void testCheckMaintenanceDueNotificationsFrequent() {
        notificationScheduler.checkMaintenanceDueNotificationsFrequent();
        verify(notificationService, times(1)).checkAndCreateDueNotifications();
        verifyNoMoreInteractions(notificationService);
    }

    @Test
    @DisplayName("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ exception ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏°‡∏ò‡∏≠‡∏î (‡πÑ‡∏°‡πà throw ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤)")
    void testExceptionHandling() {
        doThrow(new RuntimeException("boom"))
                .when(notificationService).checkAndCreateDueNotifications();

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏™‡∏≠‡∏á‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ background ‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß)
        notificationScheduler.checkMaintenanceDueNotifications();
        notificationScheduler.checkMaintenanceDueNotificationsFrequent();

        verify(notificationService, times(2)).checkAndCreateDueNotifications();
        verifyNoMoreInteractions(notificationService);
    }
}
