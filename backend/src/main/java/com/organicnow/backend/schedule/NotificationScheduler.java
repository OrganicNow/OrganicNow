package com.organicnow.backend.schedule;

import com.organicnow.backend.service.NotificationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class NotificationScheduler {

    private final NotificationService notificationService;

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö maintenance schedules ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00
     * cron = "0 0 9 * * *" ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ
     */
    @Scheduled(cron = "0 0 9 * * *")
    public void checkMaintenanceDueNotifications() {
        log.info("‚è∞ Running scheduled task: checking for due maintenance schedules");
        try {
            notificationService.checkAndCreateDueNotifications();
        } catch (Exception e) {
            log.error("Error in scheduled notification check", e);
        }
        log.info("‚è∞ Completed scheduled notification check");
    }

    /**
     * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development)
     * ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô fixedRate = 3600000 (1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
     */
    @Scheduled(fixedRate = 3600000) // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = 10,000 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    public void checkMaintenanceDueNotificationsFrequent() {
        log.info("üîÑ Running frequent notification check (every 10 seconds)");
        try {
            notificationService.checkAndCreateDueNotifications();
        } catch (Exception e) {
            log.error("Error in frequent notification check", e);
        }
    }
}